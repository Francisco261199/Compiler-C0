-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.11 from ParserC0.y
-----------------------------------------------------------------------------

state 94 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parserC0 -> Func                            (0)
	Func -> Type var '(' Decl ')' '{' Stmts ReturnStm ';' '}'   (1)
	ReturnStm -> return Exps                           (2)
	ReturnStm -> return true                           (3)
	ReturnStm -> return false                          (4)
	Stm -> var '=' Exp ';'                             (5)
	Stm -> Type var ';'                                (6)
	Stm -> Type var '=' Exp ';'                        (7)
	Stm -> if '(' ExpCompare ')' Stm else Stm          (8)
	Stm -> if '(' ExpCompare ')' Stm                   (9)
	Stm -> while '(' ExpCompare ')' Stm                (10)
	Stm -> '{' Stmts '}'                               (11)
	Stm -> ReturnStm ';'                               (12)
	Stm -> var '(' Exps ')' ';'                        (13)
	Exp -> num                                         (14)
	Exp -> var                                         (15)
	Exp -> '(' Exp ')'                                 (16)
	Exp -> Exp '+' Exp                                 (17)
	Exp -> Exp '-' Exp                                 (18)
	Exp -> Exp '*' Exp                                 (19)
	Exp -> Exp '/' Exp                                 (20)
	Exp -> Exp '%' Exp                                 (21)
	Exp -> var '(' Exps ')'                            (22)
	ExpCompare -> Exp "==" Exp                         (23)
	ExpCompare -> Exp "!=" Exp                         (24)
	ExpCompare -> Exp "<=" Exp                         (25)
	ExpCompare -> Exp ">=" Exp                         (26)
	ExpCompare -> Exp "<" Exp                          (27)
	ExpCompare -> Exp ">" Exp                          (28)
	ExpCompare -> ExpCompare "&&" ExpCompare           (29)
	ExpCompare -> ExpCompare "||" ExpCompare           (30)
	ExpCompare -> '!' '(' ExpCompare ')'               (31)
	ExpCompare -> true                                 (32)
	ExpCompare -> false                                (33)
	ExpCompare -> var '(' Exps ')'                     (34)
	Stmts ->                                           (35)
	Stmts -> Stmts Stm                                 (36)
	Type -> int                                        (37)
	Type -> bool                                       (38)
	Decl ->                                            (39)
	Decl -> Type var                                   (40)
	Decl -> Decl ',' Type var                          (41)
	Exps ->                                            (42)
	Exps -> Exp                                        (43)
	Exps -> Exps ',' Exp                               (44)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	num            { NUM_TOK $$ }
	var            { VAR_TOK $$ }
	true           { TRUE_TOK $$ }
	false          { FALSE_TOK $$ }
	return         { RETURN_TOK }
	int            { INT_DEF_TOK }
	bool           { BOOL_DEF_TOK }
	'('            { LPAREN_TOK }
	')'            { RPAREN_TOK }
	'='            { ASSIGN_TOK }
	'{'            { LBRACE_TOK }
	'}'            { RBRACE_TOK }
	'+'            { PLUS_TOK }
	'-'            { MINUS_TOK }
	'*'            { MULT_TOK }
	'/'            { DIV_TOK }
	'%'            { MOD_TOK }
	';'            { SEMICOLON_TOK }
	','            { COLON_TOK }
	"=="           { EQUAL_TOK }
	"!="           { NEQUAL_TOK }
	"<"            { LTHEN_TOK }
	">"            { GTHEN_TOK }
	">="           { GTOE_TOK }
	"<="           { LTOE_TOK }
	"&&"           { AND_TOK }
	"||"           { OR_TOK }
	'!'            { NOT_TOK }
	if             { IF_TOK }
	else           { ELSE_TOK }
	while          { WHILE_TOK }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parserC0 rule  0
	Func            rule  1
	ReturnStm       rules 2, 3, 4
	Stm             rules 5, 6, 7, 8, 9, 10, 11, 12, 13
	Exp             rules 14, 15, 16, 17, 18, 19, 20, 21, 22
	ExpCompare      rules 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34
	Stmts           rules 35, 36
	Type            rules 37, 38
	Decl            rules 39, 40, 41
	Exps            rules 42, 43, 44

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	int            shift, and enter state 3
	bool           shift, and enter state 4

	Func           goto state 5
	Type           goto state 2

State 1


	int            shift, and enter state 3
	bool           shift, and enter state 4

	Type           goto state 2

State 2

	Func -> Type . var '(' Decl ')' '{' Stmts ReturnStm ';' '}'    (rule 1)

	var            shift, and enter state 6


State 3

	Type -> int .                                       (rule 37)

	var            reduce using rule 37


State 4

	Type -> bool .                                      (rule 38)

	var            reduce using rule 38


State 5

	%start_parserC0 -> Func .                           (rule 0)

	%eof           accept


State 6

	Func -> Type var . '(' Decl ')' '{' Stmts ReturnStm ';' '}'    (rule 1)

	'('            shift, and enter state 7


State 7

	Func -> Type var '(' . Decl ')' '{' Stmts ReturnStm ';' '}'    (rule 1)

	int            shift, and enter state 3
	bool           shift, and enter state 4
	')'            reduce using rule 39
	','            reduce using rule 39

	Type           goto state 8
	Decl           goto state 9

State 8

	Decl -> Type . var                                  (rule 40)

	var            shift, and enter state 12


State 9

	Func -> Type var '(' Decl . ')' '{' Stmts ReturnStm ';' '}'    (rule 1)
	Decl -> Decl . ',' Type var                         (rule 41)

	')'            shift, and enter state 10
	','            shift, and enter state 11


State 10

	Func -> Type var '(' Decl ')' . '{' Stmts ReturnStm ';' '}'    (rule 1)

	'{'            shift, and enter state 14


State 11

	Decl -> Decl ',' . Type var                         (rule 41)

	int            shift, and enter state 3
	bool           shift, and enter state 4

	Type           goto state 13

State 12

	Decl -> Type var .                                  (rule 40)

	')'            reduce using rule 40
	','            reduce using rule 40


State 13

	Decl -> Decl ',' Type . var                         (rule 41)

	var            shift, and enter state 16


State 14

	Func -> Type var '(' Decl ')' '{' . Stmts ReturnStm ';' '}'    (rule 1)

	var            reduce using rule 35
	return         reduce using rule 35
	int            reduce using rule 35
	bool           reduce using rule 35
	'{'            reduce using rule 35
	if             reduce using rule 35
	while          reduce using rule 35

	Stmts          goto state 15

State 15

	Func -> Type var '(' Decl ')' '{' Stmts . ReturnStm ';' '}'    (rule 1)
	Stmts -> Stmts . Stm                                (rule 36)

	var            shift, and enter state 20
	return         shift, and enter state 21
	int            shift, and enter state 3
	bool           shift, and enter state 4
	'{'            shift, and enter state 22
	if             shift, and enter state 23
	while          shift, and enter state 24

	ReturnStm      goto state 17
	Stm            goto state 18
	Type           goto state 19

State 16

	Decl -> Decl ',' Type var .                         (rule 41)

	')'            reduce using rule 41
	','            reduce using rule 41


State 17

	Func -> Type var '(' Decl ')' '{' Stmts ReturnStm . ';' '}'    (rule 1)
	Stm -> ReturnStm . ';'                              (rule 12)

	';'            shift, and enter state 38


State 18

	Stmts -> Stmts Stm .                                (rule 36)

	var            reduce using rule 36
	return         reduce using rule 36
	int            reduce using rule 36
	bool           reduce using rule 36
	'{'            reduce using rule 36
	'}'            reduce using rule 36
	if             reduce using rule 36
	while          reduce using rule 36


State 19

	Stm -> Type . var ';'                               (rule 6)
	Stm -> Type . var '=' Exp ';'                       (rule 7)

	var            shift, and enter state 37


State 20

	Stm -> var . '=' Exp ';'                            (rule 5)
	Stm -> var . '(' Exps ')' ';'                       (rule 13)

	'('            shift, and enter state 35
	'='            shift, and enter state 36


State 21

	ReturnStm -> return . Exps                          (rule 2)
	ReturnStm -> return . true                          (rule 3)
	ReturnStm -> return . false                         (rule 4)

	num            shift, and enter state 30
	var            shift, and enter state 31
	true           shift, and enter state 32
	false          shift, and enter state 33
	'('            shift, and enter state 34
	';'            reduce using rule 42
	','            reduce using rule 42

	Exp            goto state 28
	Exps           goto state 29

State 22

	Stm -> '{' . Stmts '}'                              (rule 11)

	var            reduce using rule 35
	return         reduce using rule 35
	int            reduce using rule 35
	bool           reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	if             reduce using rule 35
	while          reduce using rule 35

	Stmts          goto state 27

State 23

	Stm -> if . '(' ExpCompare ')' Stm else Stm         (rule 8)
	Stm -> if . '(' ExpCompare ')' Stm                  (rule 9)

	'('            shift, and enter state 26


State 24

	Stm -> while . '(' ExpCompare ')' Stm               (rule 10)

	'('            shift, and enter state 25


State 25

	Stm -> while '(' . ExpCompare ')' Stm               (rule 10)

	num            shift, and enter state 30
	var            shift, and enter state 56
	true           shift, and enter state 57
	false          shift, and enter state 58
	'('            shift, and enter state 34
	'!'            shift, and enter state 59

	Exp            goto state 54
	ExpCompare     goto state 60

State 26

	Stm -> if '(' . ExpCompare ')' Stm else Stm         (rule 8)
	Stm -> if '(' . ExpCompare ')' Stm                  (rule 9)

	num            shift, and enter state 30
	var            shift, and enter state 56
	true           shift, and enter state 57
	false          shift, and enter state 58
	'('            shift, and enter state 34
	'!'            shift, and enter state 59

	Exp            goto state 54
	ExpCompare     goto state 55

State 27

	Stm -> '{' Stmts . '}'                              (rule 11)
	Stmts -> Stmts . Stm                                (rule 36)

	var            shift, and enter state 20
	return         shift, and enter state 21
	int            shift, and enter state 3
	bool           shift, and enter state 4
	'{'            shift, and enter state 22
	'}'            shift, and enter state 53
	if             shift, and enter state 23
	while          shift, and enter state 24

	ReturnStm      goto state 52
	Stm            goto state 18
	Type           goto state 19

State 28

	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)
	Exps -> Exp .                                       (rule 43)

	')'            reduce using rule 43
	'+'            shift, and enter state 47
	'-'            shift, and enter state 48
	'*'            shift, and enter state 49
	'/'            shift, and enter state 50
	'%'            shift, and enter state 51
	';'            reduce using rule 43
	','            reduce using rule 43


State 29

	ReturnStm -> return Exps .                          (rule 2)
	Exps -> Exps . ',' Exp                              (rule 44)

	';'            reduce using rule 2
	','            shift, and enter state 46


State 30

	Exp -> num .                                        (rule 14)

	')'            reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'/'            reduce using rule 14
	'%'            reduce using rule 14
	';'            reduce using rule 14
	','            reduce using rule 14
	"=="           reduce using rule 14
	"!="           reduce using rule 14
	"<"            reduce using rule 14
	">"            reduce using rule 14
	">="           reduce using rule 14
	"<="           reduce using rule 14
	"&&"           reduce using rule 14
	"||"           reduce using rule 14


State 31

	Exp -> var .                                        (rule 15)
	Exp -> var . '(' Exps ')'                           (rule 22)

	'('            shift, and enter state 45
	')'            reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	'%'            reduce using rule 15
	';'            reduce using rule 15
	','            reduce using rule 15
	"=="           reduce using rule 15
	"!="           reduce using rule 15
	"<"            reduce using rule 15
	">"            reduce using rule 15
	">="           reduce using rule 15
	"<="           reduce using rule 15
	"&&"           reduce using rule 15
	"||"           reduce using rule 15


State 32

	ReturnStm -> return true .                          (rule 3)

	';'            reduce using rule 3


State 33

	ReturnStm -> return false .                         (rule 4)

	';'            reduce using rule 4


State 34

	Exp -> '(' . Exp ')'                                (rule 16)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34

	Exp            goto state 44

State 35

	Stm -> var '(' . Exps ')' ';'                       (rule 13)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34
	')'            reduce using rule 42
	','            reduce using rule 42

	Exp            goto state 28
	Exps           goto state 43

State 36

	Stm -> var '=' . Exp ';'                            (rule 5)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34

	Exp            goto state 42

State 37

	Stm -> Type var . ';'                               (rule 6)
	Stm -> Type var . '=' Exp ';'                       (rule 7)

	'='            shift, and enter state 40
	';'            shift, and enter state 41


State 38

	Func -> Type var '(' Decl ')' '{' Stmts ReturnStm ';' . '}'    (rule 1)
	Stm -> ReturnStm ';' .                              (rule 12)

	var            reduce using rule 12
	return         reduce using rule 12
	int            reduce using rule 12
	bool           reduce using rule 12
	'{'            reduce using rule 12
	'}'            shift, and enter state 39
	if             reduce using rule 12
	while          reduce using rule 12


State 39

	Func -> Type var '(' Decl ')' '{' Stmts ReturnStm ';' '}' .    (rule 1)

	%eof           reduce using rule 1


State 40

	Stm -> Type var '=' . Exp ';'                       (rule 7)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34

	Exp            goto state 84

State 41

	Stm -> Type var ';' .                               (rule 6)

	var            reduce using rule 6
	return         reduce using rule 6
	int            reduce using rule 6
	bool           reduce using rule 6
	'{'            reduce using rule 6
	'}'            reduce using rule 6
	if             reduce using rule 6
	else           reduce using rule 6
	while          reduce using rule 6


State 42

	Stm -> var '=' Exp . ';'                            (rule 5)
	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)

	'+'            shift, and enter state 47
	'-'            shift, and enter state 48
	'*'            shift, and enter state 49
	'/'            shift, and enter state 50
	'%'            shift, and enter state 51
	';'            shift, and enter state 83


State 43

	Stm -> var '(' Exps . ')' ';'                       (rule 13)
	Exps -> Exps . ',' Exp                              (rule 44)

	')'            shift, and enter state 82
	','            shift, and enter state 46


State 44

	Exp -> '(' Exp . ')'                                (rule 16)
	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)

	')'            shift, and enter state 81
	'+'            shift, and enter state 47
	'-'            shift, and enter state 48
	'*'            shift, and enter state 49
	'/'            shift, and enter state 50
	'%'            shift, and enter state 51


State 45

	Exp -> var '(' . Exps ')'                           (rule 22)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34
	')'            reduce using rule 42
	','            reduce using rule 42

	Exp            goto state 28
	Exps           goto state 80

State 46

	Exps -> Exps ',' . Exp                              (rule 44)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34

	Exp            goto state 79

State 47

	Exp -> Exp '+' . Exp                                (rule 17)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34

	Exp            goto state 78

State 48

	Exp -> Exp '-' . Exp                                (rule 18)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34

	Exp            goto state 77

State 49

	Exp -> Exp '*' . Exp                                (rule 19)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34

	Exp            goto state 76

State 50

	Exp -> Exp '/' . Exp                                (rule 20)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34

	Exp            goto state 75

State 51

	Exp -> Exp '%' . Exp                                (rule 21)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34

	Exp            goto state 74

State 52

	Stm -> ReturnStm . ';'                              (rule 12)

	';'            shift, and enter state 73


State 53

	Stm -> '{' Stmts '}' .                              (rule 11)

	var            reduce using rule 11
	return         reduce using rule 11
	int            reduce using rule 11
	bool           reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	if             reduce using rule 11
	else           reduce using rule 11
	while          reduce using rule 11


State 54

	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)
	ExpCompare -> Exp . "==" Exp                        (rule 23)
	ExpCompare -> Exp . "!=" Exp                        (rule 24)
	ExpCompare -> Exp . "<=" Exp                        (rule 25)
	ExpCompare -> Exp . ">=" Exp                        (rule 26)
	ExpCompare -> Exp . "<" Exp                         (rule 27)
	ExpCompare -> Exp . ">" Exp                         (rule 28)

	'+'            shift, and enter state 47
	'-'            shift, and enter state 48
	'*'            shift, and enter state 49
	'/'            shift, and enter state 50
	'%'            shift, and enter state 51
	"=="           shift, and enter state 67
	"!="           shift, and enter state 68
	"<"            shift, and enter state 69
	">"            shift, and enter state 70
	">="           shift, and enter state 71
	"<="           shift, and enter state 72


State 55

	Stm -> if '(' ExpCompare . ')' Stm else Stm         (rule 8)
	Stm -> if '(' ExpCompare . ')' Stm                  (rule 9)
	ExpCompare -> ExpCompare . "&&" ExpCompare          (rule 29)
	ExpCompare -> ExpCompare . "||" ExpCompare          (rule 30)

	')'            shift, and enter state 66
	"&&"           shift, and enter state 62
	"||"           shift, and enter state 63


State 56

	Exp -> var .                                        (rule 15)
	Exp -> var . '(' Exps ')'                           (rule 22)
	ExpCompare -> var . '(' Exps ')'                    (rule 34)

	'('            shift, and enter state 65
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	'%'            reduce using rule 15
	"=="           reduce using rule 15
	"!="           reduce using rule 15
	"<"            reduce using rule 15
	">"            reduce using rule 15
	">="           reduce using rule 15
	"<="           reduce using rule 15


State 57

	ExpCompare -> true .                                (rule 32)

	')'            reduce using rule 32
	"&&"           reduce using rule 32
	"||"           reduce using rule 32


State 58

	ExpCompare -> false .                               (rule 33)

	')'            reduce using rule 33
	"&&"           reduce using rule 33
	"||"           reduce using rule 33


State 59

	ExpCompare -> '!' . '(' ExpCompare ')'              (rule 31)

	'('            shift, and enter state 64


State 60

	Stm -> while '(' ExpCompare . ')' Stm               (rule 10)
	ExpCompare -> ExpCompare . "&&" ExpCompare          (rule 29)
	ExpCompare -> ExpCompare . "||" ExpCompare          (rule 30)

	')'            shift, and enter state 61
	"&&"           shift, and enter state 62
	"||"           shift, and enter state 63


State 61

	Stm -> while '(' ExpCompare ')' . Stm               (rule 10)

	var            shift, and enter state 20
	return         shift, and enter state 21
	int            shift, and enter state 3
	bool           shift, and enter state 4
	'{'            shift, and enter state 22
	if             shift, and enter state 23
	while          shift, and enter state 24

	ReturnStm      goto state 52
	Stm            goto state 99
	Type           goto state 19

State 62

	ExpCompare -> ExpCompare "&&" . ExpCompare          (rule 29)

	num            shift, and enter state 30
	var            shift, and enter state 56
	true           shift, and enter state 57
	false          shift, and enter state 58
	'('            shift, and enter state 34
	'!'            shift, and enter state 59

	Exp            goto state 54
	ExpCompare     goto state 98

State 63

	ExpCompare -> ExpCompare "||" . ExpCompare          (rule 30)

	num            shift, and enter state 30
	var            shift, and enter state 56
	true           shift, and enter state 57
	false          shift, and enter state 58
	'('            shift, and enter state 34
	'!'            shift, and enter state 59

	Exp            goto state 54
	ExpCompare     goto state 97

State 64

	ExpCompare -> '!' '(' . ExpCompare ')'              (rule 31)

	num            shift, and enter state 30
	var            shift, and enter state 56
	true           shift, and enter state 57
	false          shift, and enter state 58
	'('            shift, and enter state 34
	'!'            shift, and enter state 59

	Exp            goto state 54
	ExpCompare     goto state 96

State 65

	Exp -> var '(' . Exps ')'                           (rule 22)
	ExpCompare -> var '(' . Exps ')'                    (rule 34)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34
	')'            reduce using rule 42
	','            reduce using rule 42

	Exp            goto state 28
	Exps           goto state 95

State 66

	Stm -> if '(' ExpCompare ')' . Stm else Stm         (rule 8)
	Stm -> if '(' ExpCompare ')' . Stm                  (rule 9)

	var            shift, and enter state 20
	return         shift, and enter state 21
	int            shift, and enter state 3
	bool           shift, and enter state 4
	'{'            shift, and enter state 22
	if             shift, and enter state 23
	while          shift, and enter state 24

	ReturnStm      goto state 52
	Stm            goto state 94
	Type           goto state 19

State 67

	ExpCompare -> Exp "==" . Exp                        (rule 23)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34

	Exp            goto state 93

State 68

	ExpCompare -> Exp "!=" . Exp                        (rule 24)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34

	Exp            goto state 92

State 69

	ExpCompare -> Exp "<" . Exp                         (rule 27)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34

	Exp            goto state 91

State 70

	ExpCompare -> Exp ">" . Exp                         (rule 28)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34

	Exp            goto state 90

State 71

	ExpCompare -> Exp ">=" . Exp                        (rule 26)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34

	Exp            goto state 89

State 72

	ExpCompare -> Exp "<=" . Exp                        (rule 25)

	num            shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 34

	Exp            goto state 88

State 73

	Stm -> ReturnStm ';' .                              (rule 12)

	var            reduce using rule 12
	return         reduce using rule 12
	int            reduce using rule 12
	bool           reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	if             reduce using rule 12
	else           reduce using rule 12
	while          reduce using rule 12


State 74

	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)
	Exp -> Exp '%' Exp .                                (rule 21)

	')'            reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'%'            reduce using rule 21
	';'            reduce using rule 21
	','            reduce using rule 21
	"=="           reduce using rule 21
	"!="           reduce using rule 21
	"<"            reduce using rule 21
	">"            reduce using rule 21
	">="           reduce using rule 21
	"<="           reduce using rule 21
	"&&"           reduce using rule 21
	"||"           reduce using rule 21


State 75

	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp '/' Exp .                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)

	')'            reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	'%'            reduce using rule 20
	';'            reduce using rule 20
	','            reduce using rule 20
	"=="           reduce using rule 20
	"!="           reduce using rule 20
	"<"            reduce using rule 20
	">"            reduce using rule 20
	">="           reduce using rule 20
	"<="           reduce using rule 20
	"&&"           reduce using rule 20
	"||"           reduce using rule 20


State 76

	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp '*' Exp .                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)

	')'            reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	'%'            reduce using rule 19
	';'            reduce using rule 19
	','            reduce using rule 19
	"=="           reduce using rule 19
	"!="           reduce using rule 19
	"<"            reduce using rule 19
	">"            reduce using rule 19
	">="           reduce using rule 19
	"<="           reduce using rule 19
	"&&"           reduce using rule 19
	"||"           reduce using rule 19


State 77

	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp '-' Exp .                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)

	')'            reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            shift, and enter state 49
	'/'            shift, and enter state 50
	'%'            shift, and enter state 51
	';'            reduce using rule 18
	','            reduce using rule 18
	"=="           reduce using rule 18
	"!="           reduce using rule 18
	"<"            reduce using rule 18
	">"            reduce using rule 18
	">="           reduce using rule 18
	"<="           reduce using rule 18
	"&&"           reduce using rule 18
	"||"           reduce using rule 18


State 78

	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp '+' Exp .                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)

	')'            reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            shift, and enter state 49
	'/'            shift, and enter state 50
	'%'            shift, and enter state 51
	';'            reduce using rule 17
	','            reduce using rule 17
	"=="           reduce using rule 17
	"!="           reduce using rule 17
	"<"            reduce using rule 17
	">"            reduce using rule 17
	">="           reduce using rule 17
	"<="           reduce using rule 17
	"&&"           reduce using rule 17
	"||"           reduce using rule 17


State 79

	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)
	Exps -> Exps ',' Exp .                              (rule 44)

	')'            reduce using rule 44
	'+'            shift, and enter state 47
	'-'            shift, and enter state 48
	'*'            shift, and enter state 49
	'/'            shift, and enter state 50
	'%'            shift, and enter state 51
	';'            reduce using rule 44
	','            reduce using rule 44


State 80

	Exp -> var '(' Exps . ')'                           (rule 22)
	Exps -> Exps . ',' Exp                              (rule 44)

	')'            shift, and enter state 87
	','            shift, and enter state 46


State 81

	Exp -> '(' Exp ')' .                                (rule 16)

	')'            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'/'            reduce using rule 16
	'%'            reduce using rule 16
	';'            reduce using rule 16
	','            reduce using rule 16
	"=="           reduce using rule 16
	"!="           reduce using rule 16
	"<"            reduce using rule 16
	">"            reduce using rule 16
	">="           reduce using rule 16
	"<="           reduce using rule 16
	"&&"           reduce using rule 16
	"||"           reduce using rule 16


State 82

	Stm -> var '(' Exps ')' . ';'                       (rule 13)

	';'            shift, and enter state 86


State 83

	Stm -> var '=' Exp ';' .                            (rule 5)

	var            reduce using rule 5
	return         reduce using rule 5
	int            reduce using rule 5
	bool           reduce using rule 5
	'{'            reduce using rule 5
	'}'            reduce using rule 5
	if             reduce using rule 5
	else           reduce using rule 5
	while          reduce using rule 5


State 84

	Stm -> Type var '=' Exp . ';'                       (rule 7)
	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)

	'+'            shift, and enter state 47
	'-'            shift, and enter state 48
	'*'            shift, and enter state 49
	'/'            shift, and enter state 50
	'%'            shift, and enter state 51
	';'            shift, and enter state 85


State 85

	Stm -> Type var '=' Exp ';' .                       (rule 7)

	var            reduce using rule 7
	return         reduce using rule 7
	int            reduce using rule 7
	bool           reduce using rule 7
	'{'            reduce using rule 7
	'}'            reduce using rule 7
	if             reduce using rule 7
	else           reduce using rule 7
	while          reduce using rule 7


State 86

	Stm -> var '(' Exps ')' ';' .                       (rule 13)

	var            reduce using rule 13
	return         reduce using rule 13
	int            reduce using rule 13
	bool           reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	if             reduce using rule 13
	else           reduce using rule 13
	while          reduce using rule 13


State 87

	Exp -> var '(' Exps ')' .                           (rule 22)

	')'            reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	'%'            reduce using rule 22
	';'            reduce using rule 22
	','            reduce using rule 22
	"=="           reduce using rule 22
	"!="           reduce using rule 22
	"<"            reduce using rule 22
	">"            reduce using rule 22
	">="           reduce using rule 22
	"<="           reduce using rule 22
	"&&"           reduce using rule 22
	"||"           reduce using rule 22


State 88

	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)
	ExpCompare -> Exp "<=" Exp .                        (rule 25)

	')'            reduce using rule 25
	'+'            shift, and enter state 47
	'-'            shift, and enter state 48
	'*'            shift, and enter state 49
	'/'            shift, and enter state 50
	'%'            shift, and enter state 51
	"&&"           reduce using rule 25
	"||"           reduce using rule 25


State 89

	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)
	ExpCompare -> Exp ">=" Exp .                        (rule 26)

	')'            reduce using rule 26
	'+'            shift, and enter state 47
	'-'            shift, and enter state 48
	'*'            shift, and enter state 49
	'/'            shift, and enter state 50
	'%'            shift, and enter state 51
	"&&"           reduce using rule 26
	"||"           reduce using rule 26


State 90

	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)
	ExpCompare -> Exp ">" Exp .                         (rule 28)

	')'            reduce using rule 28
	'+'            shift, and enter state 47
	'-'            shift, and enter state 48
	'*'            shift, and enter state 49
	'/'            shift, and enter state 50
	'%'            shift, and enter state 51
	"&&"           reduce using rule 28
	"||"           reduce using rule 28


State 91

	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)
	ExpCompare -> Exp "<" Exp .                         (rule 27)

	')'            reduce using rule 27
	'+'            shift, and enter state 47
	'-'            shift, and enter state 48
	'*'            shift, and enter state 49
	'/'            shift, and enter state 50
	'%'            shift, and enter state 51
	"&&"           reduce using rule 27
	"||"           reduce using rule 27


State 92

	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)
	ExpCompare -> Exp "!=" Exp .                        (rule 24)

	')'            reduce using rule 24
	'+'            shift, and enter state 47
	'-'            shift, and enter state 48
	'*'            shift, and enter state 49
	'/'            shift, and enter state 50
	'%'            shift, and enter state 51
	"&&"           reduce using rule 24
	"||"           reduce using rule 24


State 93

	Exp -> Exp . '+' Exp                                (rule 17)
	Exp -> Exp . '-' Exp                                (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '/' Exp                                (rule 20)
	Exp -> Exp . '%' Exp                                (rule 21)
	ExpCompare -> Exp "==" Exp .                        (rule 23)

	')'            reduce using rule 23
	'+'            shift, and enter state 47
	'-'            shift, and enter state 48
	'*'            shift, and enter state 49
	'/'            shift, and enter state 50
	'%'            shift, and enter state 51
	"&&"           reduce using rule 23
	"||"           reduce using rule 23


State 94

	Stm -> if '(' ExpCompare ')' Stm . else Stm         (rule 8)
	Stm -> if '(' ExpCompare ')' Stm .                  (rule 9)

	var            reduce using rule 9
	return         reduce using rule 9
	int            reduce using rule 9
	bool           reduce using rule 9
	'{'            reduce using rule 9
	'}'            reduce using rule 9
	if             reduce using rule 9
	else           shift, and enter state 102
			(reduce using rule 9)

	while          reduce using rule 9


State 95

	Exp -> var '(' Exps . ')'                           (rule 22)
	ExpCompare -> var '(' Exps . ')'                    (rule 34)
	Exps -> Exps . ',' Exp                              (rule 44)

	')'            shift, and enter state 101
	','            shift, and enter state 46


State 96

	ExpCompare -> ExpCompare . "&&" ExpCompare          (rule 29)
	ExpCompare -> ExpCompare . "||" ExpCompare          (rule 30)
	ExpCompare -> '!' '(' ExpCompare . ')'              (rule 31)

	')'            shift, and enter state 100
	"&&"           shift, and enter state 62
	"||"           shift, and enter state 63


State 97

	ExpCompare -> ExpCompare . "&&" ExpCompare          (rule 29)
	ExpCompare -> ExpCompare . "||" ExpCompare          (rule 30)
	ExpCompare -> ExpCompare "||" ExpCompare .          (rule 30)

	')'            reduce using rule 30
	"&&"           reduce using rule 30
	"||"           reduce using rule 30


State 98

	ExpCompare -> ExpCompare . "&&" ExpCompare          (rule 29)
	ExpCompare -> ExpCompare "&&" ExpCompare .          (rule 29)
	ExpCompare -> ExpCompare . "||" ExpCompare          (rule 30)

	')'            reduce using rule 29
	"&&"           reduce using rule 29
	"||"           reduce using rule 29


State 99

	Stm -> while '(' ExpCompare ')' Stm .               (rule 10)

	var            reduce using rule 10
	return         reduce using rule 10
	int            reduce using rule 10
	bool           reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	if             reduce using rule 10
	else           reduce using rule 10
	while          reduce using rule 10


State 100

	ExpCompare -> '!' '(' ExpCompare ')' .              (rule 31)

	')'            reduce using rule 31
	"&&"           reduce using rule 31
	"||"           reduce using rule 31


State 101

	Exp -> var '(' Exps ')' .                           (rule 22)
	ExpCompare -> var '(' Exps ')' .                    (rule 34)

	')'            reduce using rule 34
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	'%'            reduce using rule 22
	"=="           reduce using rule 22
	"!="           reduce using rule 22
	"<"            reduce using rule 22
	">"            reduce using rule 22
	">="           reduce using rule 22
	"<="           reduce using rule 22
	"&&"           reduce using rule 34
	"||"           reduce using rule 34


State 102

	Stm -> if '(' ExpCompare ')' Stm else . Stm         (rule 8)

	var            shift, and enter state 20
	return         shift, and enter state 21
	int            shift, and enter state 3
	bool           shift, and enter state 4
	'{'            shift, and enter state 22
	if             shift, and enter state 23
	while          shift, and enter state 24

	ReturnStm      goto state 52
	Stm            goto state 103
	Type           goto state 19

State 103

	Stm -> if '(' ExpCompare ')' Stm else Stm .         (rule 8)

	var            reduce using rule 8
	return         reduce using rule 8
	int            reduce using rule 8
	bool           reduce using rule 8
	'{'            reduce using rule 8
	'}'            reduce using rule 8
	if             reduce using rule 8
	else           reduce using rule 8
	while          reduce using rule 8


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 45
Number of terminals: 31
Number of non-terminals: 10
Number of states: 104
