-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.11 from ParserC0.y
-----------------------------------------------------------------------------

state 56 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parserC0 -> Stm                             (0)
	Stm -> var '=' Exp ';'                             (1)
	Stm -> Type var '=' Exp ';'                        (2)
	Stm -> if '(' ExpCompare ')' Stm else Stm          (3)
	Stm -> if '(' ExpCompare ')' Stm                   (4)
	Stm -> while ExpCompare Stm                        (5)
	Stm -> '{' Stmts '}'                               (6)
	Stmts -> Stm                                       (7)
	Stmts -> Stmts Stm                                 (8)
	Exp -> num                                         (9)
	Exp -> var                                         (10)
	Exp -> '(' Exp ')'                                 (11)
	Exp -> Exp '+' Exp                                 (12)
	Exp -> Exp '-' Exp                                 (13)
	Exp -> Exp '*' Exp                                 (14)
	Exp -> Exp '/' Exp                                 (15)
	Exp -> Exp '%' Exp                                 (16)
	ExpCompare -> Exp "==" Exp                         (17)
	ExpCompare -> Exp "!=" Exp                         (18)
	ExpCompare -> Exp "<=" Exp                         (19)
	ExpCompare -> Exp ">=" Exp                         (20)
	ExpCompare -> Exp "<" Exp                          (21)
	ExpCompare -> Exp ">" Exp                          (22)
	ExpCompare -> true                                 (23)
	ExpCompare -> false                                (24)
	Type -> int                                        (25)
	Type -> bool                                       (26)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	num            { NUM_TOK $$ }
	var            { VAR_TOK $$ }
	true           { TRUE_TOK }
	false          { FALSE_TOK }
	int            { INT_DEF_TOK }
	bool           { BOOL_DEF_TOK }
	'('            { LPAREN_TOK }
	')'            { RPAREN_TOK }
	'='            { ASSIGN_TOK }
	'{'            { LBRACE_TOK }
	'}'            { RBRACE_TOK }
	'+'            { PLUS_TOK }
	'-'            { MINUS_TOK }
	'*'            { MULT_TOK }
	'/'            { DIV_TOK }
	'%'            { MOD_TOK }
	';'            { SEMICOLON_TOK }
	"=="           { EQUAL_TOK }
	"!="           { NEQUAL_TOK }
	"<"            { LTHEN_TOK }
	">"            { GTHEN_TOK }
	">="           { GTOE_TOK }
	"<="           { LTOE_TOK }
	if             { IF_TOK }
	else           { ELSE_TOK }
	while          { WHILE_TOK }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parserC0 rule  0
	Stm             rules 1, 2, 3, 4, 5, 6
	Stmts           rules 7, 8
	Exp             rules 9, 10, 11, 12, 13, 14, 15, 16
	ExpCompare      rules 17, 18, 19, 20, 21, 22, 23, 24
	Type            rules 25, 26

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	var            shift, and enter state 2
	int            shift, and enter state 5
	bool           shift, and enter state 6
	'{'            shift, and enter state 7
	if             shift, and enter state 8
	while          shift, and enter state 9

	Stm            goto state 3
	Type           goto state 4

State 1


	var            shift, and enter state 2


State 2

	Stm -> var . '=' Exp ';'                            (rule 1)

	'='            shift, and enter state 21


State 3

	%start_parserC0 -> Stm .                            (rule 0)

	%eof           accept


State 4

	Stm -> Type . var '=' Exp ';'                       (rule 2)

	var            shift, and enter state 20


State 5

	Type -> int .                                       (rule 25)

	var            reduce using rule 25


State 6

	Type -> bool .                                      (rule 26)

	var            reduce using rule 26


State 7

	Stm -> '{' . Stmts '}'                              (rule 6)

	var            shift, and enter state 2
	int            shift, and enter state 5
	bool           shift, and enter state 6
	'{'            shift, and enter state 7
	if             shift, and enter state 8
	while          shift, and enter state 9

	Stm            goto state 18
	Stmts          goto state 19
	Type           goto state 4

State 8

	Stm -> if . '(' ExpCompare ')' Stm else Stm         (rule 3)
	Stm -> if . '(' ExpCompare ')' Stm                  (rule 4)

	'('            shift, and enter state 17


State 9

	Stm -> while . ExpCompare Stm                       (rule 5)

	num            shift, and enter state 12
	var            shift, and enter state 13
	true           shift, and enter state 14
	false          shift, and enter state 15
	'('            shift, and enter state 16

	Exp            goto state 10
	ExpCompare     goto state 11

State 10

	Exp -> Exp . '+' Exp                                (rule 12)
	Exp -> Exp . '-' Exp                                (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . '/' Exp                                (rule 15)
	Exp -> Exp . '%' Exp                                (rule 16)
	ExpCompare -> Exp . "==" Exp                        (rule 17)
	ExpCompare -> Exp . "!=" Exp                        (rule 18)
	ExpCompare -> Exp . "<=" Exp                        (rule 19)
	ExpCompare -> Exp . ">=" Exp                        (rule 20)
	ExpCompare -> Exp . "<" Exp                         (rule 21)
	ExpCompare -> Exp . ">" Exp                         (rule 22)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	"=="           shift, and enter state 34
	"!="           shift, and enter state 35
	"<"            shift, and enter state 36
	">"            shift, and enter state 37
	">="           shift, and enter state 38
	"<="           shift, and enter state 39


State 11

	Stm -> while ExpCompare . Stm                       (rule 5)

	var            shift, and enter state 2
	int            shift, and enter state 5
	bool           shift, and enter state 6
	'{'            shift, and enter state 7
	if             shift, and enter state 8
	while          shift, and enter state 9

	Stm            goto state 28
	Type           goto state 4

State 12

	Exp -> num .                                        (rule 9)

	var            reduce using rule 9
	int            reduce using rule 9
	bool           reduce using rule 9
	')'            reduce using rule 9
	'{'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	'%'            reduce using rule 9
	';'            reduce using rule 9
	"=="           reduce using rule 9
	"!="           reduce using rule 9
	"<"            reduce using rule 9
	">"            reduce using rule 9
	">="           reduce using rule 9
	"<="           reduce using rule 9
	if             reduce using rule 9
	while          reduce using rule 9


State 13

	Exp -> var .                                        (rule 10)

	var            reduce using rule 10
	int            reduce using rule 10
	bool           reduce using rule 10
	')'            reduce using rule 10
	'{'            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	'%'            reduce using rule 10
	';'            reduce using rule 10
	"=="           reduce using rule 10
	"!="           reduce using rule 10
	"<"            reduce using rule 10
	">"            reduce using rule 10
	">="           reduce using rule 10
	"<="           reduce using rule 10
	if             reduce using rule 10
	while          reduce using rule 10


State 14

	ExpCompare -> true .                                (rule 23)

	var            reduce using rule 23
	int            reduce using rule 23
	bool           reduce using rule 23
	')'            reduce using rule 23
	'{'            reduce using rule 23
	if             reduce using rule 23
	while          reduce using rule 23


State 15

	ExpCompare -> false .                               (rule 24)

	var            reduce using rule 24
	int            reduce using rule 24
	bool           reduce using rule 24
	')'            reduce using rule 24
	'{'            reduce using rule 24
	if             reduce using rule 24
	while          reduce using rule 24


State 16

	Exp -> '(' . Exp ')'                                (rule 11)

	num            shift, and enter state 12
	var            shift, and enter state 13
	'('            shift, and enter state 16

	Exp            goto state 27

State 17

	Stm -> if '(' . ExpCompare ')' Stm else Stm         (rule 3)
	Stm -> if '(' . ExpCompare ')' Stm                  (rule 4)

	num            shift, and enter state 12
	var            shift, and enter state 13
	true           shift, and enter state 14
	false          shift, and enter state 15
	'('            shift, and enter state 16

	Exp            goto state 10
	ExpCompare     goto state 26

State 18

	Stmts -> Stm .                                      (rule 7)

	var            reduce using rule 7
	int            reduce using rule 7
	bool           reduce using rule 7
	'{'            reduce using rule 7
	'}'            reduce using rule 7
	if             reduce using rule 7
	while          reduce using rule 7


State 19

	Stm -> '{' Stmts . '}'                              (rule 6)
	Stmts -> Stmts . Stm                                (rule 8)

	var            shift, and enter state 2
	int            shift, and enter state 5
	bool           shift, and enter state 6
	'{'            shift, and enter state 7
	'}'            shift, and enter state 25
	if             shift, and enter state 8
	while          shift, and enter state 9

	Stm            goto state 24
	Type           goto state 4

State 20

	Stm -> Type var . '=' Exp ';'                       (rule 2)

	'='            shift, and enter state 23


State 21

	Stm -> var '=' . Exp ';'                            (rule 1)

	num            shift, and enter state 12
	var            shift, and enter state 13
	'('            shift, and enter state 16

	Exp            goto state 22

State 22

	Stm -> var '=' Exp . ';'                            (rule 1)
	Exp -> Exp . '+' Exp                                (rule 12)
	Exp -> Exp . '-' Exp                                (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . '/' Exp                                (rule 15)
	Exp -> Exp . '%' Exp                                (rule 16)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	';'            shift, and enter state 54


State 23

	Stm -> Type var '=' . Exp ';'                       (rule 2)

	num            shift, and enter state 12
	var            shift, and enter state 13
	'('            shift, and enter state 16

	Exp            goto state 53

State 24

	Stmts -> Stmts Stm .                                (rule 8)

	var            reduce using rule 8
	int            reduce using rule 8
	bool           reduce using rule 8
	'{'            reduce using rule 8
	'}'            reduce using rule 8
	if             reduce using rule 8
	while          reduce using rule 8


State 25

	Stm -> '{' Stmts '}' .                              (rule 6)

	var            reduce using rule 6
	int            reduce using rule 6
	bool           reduce using rule 6
	'{'            reduce using rule 6
	'}'            reduce using rule 6
	if             reduce using rule 6
	else           reduce using rule 6
	while          reduce using rule 6
	%eof           reduce using rule 6


State 26

	Stm -> if '(' ExpCompare . ')' Stm else Stm         (rule 3)
	Stm -> if '(' ExpCompare . ')' Stm                  (rule 4)

	')'            shift, and enter state 52


State 27

	Exp -> '(' Exp . ')'                                (rule 11)
	Exp -> Exp . '+' Exp                                (rule 12)
	Exp -> Exp . '-' Exp                                (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . '/' Exp                                (rule 15)
	Exp -> Exp . '%' Exp                                (rule 16)

	')'            shift, and enter state 51
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33


State 28

	Stm -> while ExpCompare Stm .                       (rule 5)

	var            reduce using rule 5
	int            reduce using rule 5
	bool           reduce using rule 5
	'{'            reduce using rule 5
	'}'            reduce using rule 5
	if             reduce using rule 5
	else           reduce using rule 5
	while          reduce using rule 5
	%eof           reduce using rule 5


State 29

	Exp -> Exp '+' . Exp                                (rule 12)

	num            shift, and enter state 12
	var            shift, and enter state 13
	'('            shift, and enter state 16

	Exp            goto state 50

State 30

	Exp -> Exp '-' . Exp                                (rule 13)

	num            shift, and enter state 12
	var            shift, and enter state 13
	'('            shift, and enter state 16

	Exp            goto state 49

State 31

	Exp -> Exp '*' . Exp                                (rule 14)

	num            shift, and enter state 12
	var            shift, and enter state 13
	'('            shift, and enter state 16

	Exp            goto state 48

State 32

	Exp -> Exp '/' . Exp                                (rule 15)

	num            shift, and enter state 12
	var            shift, and enter state 13
	'('            shift, and enter state 16

	Exp            goto state 47

State 33

	Exp -> Exp '%' . Exp                                (rule 16)

	num            shift, and enter state 12
	var            shift, and enter state 13
	'('            shift, and enter state 16

	Exp            goto state 46

State 34

	ExpCompare -> Exp "==" . Exp                        (rule 17)

	num            shift, and enter state 12
	var            shift, and enter state 13
	'('            shift, and enter state 16

	Exp            goto state 45

State 35

	ExpCompare -> Exp "!=" . Exp                        (rule 18)

	num            shift, and enter state 12
	var            shift, and enter state 13
	'('            shift, and enter state 16

	Exp            goto state 44

State 36

	ExpCompare -> Exp "<" . Exp                         (rule 21)

	num            shift, and enter state 12
	var            shift, and enter state 13
	'('            shift, and enter state 16

	Exp            goto state 43

State 37

	ExpCompare -> Exp ">" . Exp                         (rule 22)

	num            shift, and enter state 12
	var            shift, and enter state 13
	'('            shift, and enter state 16

	Exp            goto state 42

State 38

	ExpCompare -> Exp ">=" . Exp                        (rule 20)

	num            shift, and enter state 12
	var            shift, and enter state 13
	'('            shift, and enter state 16

	Exp            goto state 41

State 39

	ExpCompare -> Exp "<=" . Exp                        (rule 19)

	num            shift, and enter state 12
	var            shift, and enter state 13
	'('            shift, and enter state 16

	Exp            goto state 40

State 40

	Exp -> Exp . '+' Exp                                (rule 12)
	Exp -> Exp . '-' Exp                                (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . '/' Exp                                (rule 15)
	Exp -> Exp . '%' Exp                                (rule 16)
	ExpCompare -> Exp "<=" Exp .                        (rule 19)

	var            reduce using rule 19
	int            reduce using rule 19
	bool           reduce using rule 19
	')'            reduce using rule 19
	'{'            reduce using rule 19
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	if             reduce using rule 19
	while          reduce using rule 19


State 41

	Exp -> Exp . '+' Exp                                (rule 12)
	Exp -> Exp . '-' Exp                                (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . '/' Exp                                (rule 15)
	Exp -> Exp . '%' Exp                                (rule 16)
	ExpCompare -> Exp ">=" Exp .                        (rule 20)

	var            reduce using rule 20
	int            reduce using rule 20
	bool           reduce using rule 20
	')'            reduce using rule 20
	'{'            reduce using rule 20
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	if             reduce using rule 20
	while          reduce using rule 20


State 42

	Exp -> Exp . '+' Exp                                (rule 12)
	Exp -> Exp . '-' Exp                                (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . '/' Exp                                (rule 15)
	Exp -> Exp . '%' Exp                                (rule 16)
	ExpCompare -> Exp ">" Exp .                         (rule 22)

	var            reduce using rule 22
	int            reduce using rule 22
	bool           reduce using rule 22
	')'            reduce using rule 22
	'{'            reduce using rule 22
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	if             reduce using rule 22
	while          reduce using rule 22


State 43

	Exp -> Exp . '+' Exp                                (rule 12)
	Exp -> Exp . '-' Exp                                (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . '/' Exp                                (rule 15)
	Exp -> Exp . '%' Exp                                (rule 16)
	ExpCompare -> Exp "<" Exp .                         (rule 21)

	var            reduce using rule 21
	int            reduce using rule 21
	bool           reduce using rule 21
	')'            reduce using rule 21
	'{'            reduce using rule 21
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	if             reduce using rule 21
	while          reduce using rule 21


State 44

	Exp -> Exp . '+' Exp                                (rule 12)
	Exp -> Exp . '-' Exp                                (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . '/' Exp                                (rule 15)
	Exp -> Exp . '%' Exp                                (rule 16)
	ExpCompare -> Exp "!=" Exp .                        (rule 18)

	var            reduce using rule 18
	int            reduce using rule 18
	bool           reduce using rule 18
	')'            reduce using rule 18
	'{'            reduce using rule 18
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	if             reduce using rule 18
	while          reduce using rule 18


State 45

	Exp -> Exp . '+' Exp                                (rule 12)
	Exp -> Exp . '-' Exp                                (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . '/' Exp                                (rule 15)
	Exp -> Exp . '%' Exp                                (rule 16)
	ExpCompare -> Exp "==" Exp .                        (rule 17)

	var            reduce using rule 17
	int            reduce using rule 17
	bool           reduce using rule 17
	')'            reduce using rule 17
	'{'            reduce using rule 17
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	if             reduce using rule 17
	while          reduce using rule 17


State 46

	Exp -> Exp . '+' Exp                                (rule 12)
	Exp -> Exp . '-' Exp                                (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . '/' Exp                                (rule 15)
	Exp -> Exp . '%' Exp                                (rule 16)
	Exp -> Exp '%' Exp .                                (rule 16)

	var            reduce using rule 16
	int            reduce using rule 16
	bool           reduce using rule 16
	')'            reduce using rule 16
	'{'            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'/'            reduce using rule 16
	'%'            reduce using rule 16
	';'            reduce using rule 16
	"=="           reduce using rule 16
	"!="           reduce using rule 16
	"<"            reduce using rule 16
	">"            reduce using rule 16
	">="           reduce using rule 16
	"<="           reduce using rule 16
	if             reduce using rule 16
	while          reduce using rule 16


State 47

	Exp -> Exp . '+' Exp                                (rule 12)
	Exp -> Exp . '-' Exp                                (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . '/' Exp                                (rule 15)
	Exp -> Exp '/' Exp .                                (rule 15)
	Exp -> Exp . '%' Exp                                (rule 16)

	var            reduce using rule 15
	int            reduce using rule 15
	bool           reduce using rule 15
	')'            reduce using rule 15
	'{'            reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	'%'            reduce using rule 15
	';'            reduce using rule 15
	"=="           reduce using rule 15
	"!="           reduce using rule 15
	"<"            reduce using rule 15
	">"            reduce using rule 15
	">="           reduce using rule 15
	"<="           reduce using rule 15
	if             reduce using rule 15
	while          reduce using rule 15


State 48

	Exp -> Exp . '+' Exp                                (rule 12)
	Exp -> Exp . '-' Exp                                (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp '*' Exp .                                (rule 14)
	Exp -> Exp . '/' Exp                                (rule 15)
	Exp -> Exp . '%' Exp                                (rule 16)

	var            reduce using rule 14
	int            reduce using rule 14
	bool           reduce using rule 14
	')'            reduce using rule 14
	'{'            reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'/'            reduce using rule 14
	'%'            reduce using rule 14
	';'            reduce using rule 14
	"=="           reduce using rule 14
	"!="           reduce using rule 14
	"<"            reduce using rule 14
	">"            reduce using rule 14
	">="           reduce using rule 14
	"<="           reduce using rule 14
	if             reduce using rule 14
	while          reduce using rule 14


State 49

	Exp -> Exp . '+' Exp                                (rule 12)
	Exp -> Exp . '-' Exp                                (rule 13)
	Exp -> Exp '-' Exp .                                (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . '/' Exp                                (rule 15)
	Exp -> Exp . '%' Exp                                (rule 16)

	var            reduce using rule 13
	int            reduce using rule 13
	bool           reduce using rule 13
	')'            reduce using rule 13
	'{'            reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	';'            reduce using rule 13
	"=="           reduce using rule 13
	"!="           reduce using rule 13
	"<"            reduce using rule 13
	">"            reduce using rule 13
	">="           reduce using rule 13
	"<="           reduce using rule 13
	if             reduce using rule 13
	while          reduce using rule 13


State 50

	Exp -> Exp . '+' Exp                                (rule 12)
	Exp -> Exp '+' Exp .                                (rule 12)
	Exp -> Exp . '-' Exp                                (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . '/' Exp                                (rule 15)
	Exp -> Exp . '%' Exp                                (rule 16)

	var            reduce using rule 12
	int            reduce using rule 12
	bool           reduce using rule 12
	')'            reduce using rule 12
	'{'            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	';'            reduce using rule 12
	"=="           reduce using rule 12
	"!="           reduce using rule 12
	"<"            reduce using rule 12
	">"            reduce using rule 12
	">="           reduce using rule 12
	"<="           reduce using rule 12
	if             reduce using rule 12
	while          reduce using rule 12


State 51

	Exp -> '(' Exp ')' .                                (rule 11)

	var            reduce using rule 11
	int            reduce using rule 11
	bool           reduce using rule 11
	')'            reduce using rule 11
	'{'            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	'%'            reduce using rule 11
	';'            reduce using rule 11
	"=="           reduce using rule 11
	"!="           reduce using rule 11
	"<"            reduce using rule 11
	">"            reduce using rule 11
	">="           reduce using rule 11
	"<="           reduce using rule 11
	if             reduce using rule 11
	while          reduce using rule 11


State 52

	Stm -> if '(' ExpCompare ')' . Stm else Stm         (rule 3)
	Stm -> if '(' ExpCompare ')' . Stm                  (rule 4)

	var            shift, and enter state 2
	int            shift, and enter state 5
	bool           shift, and enter state 6
	'{'            shift, and enter state 7
	if             shift, and enter state 8
	while          shift, and enter state 9

	Stm            goto state 56
	Type           goto state 4

State 53

	Stm -> Type var '=' Exp . ';'                       (rule 2)
	Exp -> Exp . '+' Exp                                (rule 12)
	Exp -> Exp . '-' Exp                                (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . '/' Exp                                (rule 15)
	Exp -> Exp . '%' Exp                                (rule 16)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	';'            shift, and enter state 55


State 54

	Stm -> var '=' Exp ';' .                            (rule 1)

	var            reduce using rule 1
	int            reduce using rule 1
	bool           reduce using rule 1
	'{'            reduce using rule 1
	'}'            reduce using rule 1
	if             reduce using rule 1
	else           reduce using rule 1
	while          reduce using rule 1
	%eof           reduce using rule 1


State 55

	Stm -> Type var '=' Exp ';' .                       (rule 2)

	var            reduce using rule 2
	int            reduce using rule 2
	bool           reduce using rule 2
	'{'            reduce using rule 2
	'}'            reduce using rule 2
	if             reduce using rule 2
	else           reduce using rule 2
	while          reduce using rule 2
	%eof           reduce using rule 2


State 56

	Stm -> if '(' ExpCompare ')' Stm . else Stm         (rule 3)
	Stm -> if '(' ExpCompare ')' Stm .                  (rule 4)

	var            reduce using rule 4
	int            reduce using rule 4
	bool           reduce using rule 4
	'{'            reduce using rule 4
	'}'            reduce using rule 4
	if             reduce using rule 4
	else           shift, and enter state 57
			(reduce using rule 4)

	while          reduce using rule 4
	%eof           reduce using rule 4


State 57

	Stm -> if '(' ExpCompare ')' Stm else . Stm         (rule 3)

	var            shift, and enter state 2
	int            shift, and enter state 5
	bool           shift, and enter state 6
	'{'            shift, and enter state 7
	if             shift, and enter state 8
	while          shift, and enter state 9

	Stm            goto state 58
	Type           goto state 4

State 58

	Stm -> if '(' ExpCompare ')' Stm else Stm .         (rule 3)

	var            reduce using rule 3
	int            reduce using rule 3
	bool           reduce using rule 3
	'{'            reduce using rule 3
	'}'            reduce using rule 3
	if             reduce using rule 3
	else           reduce using rule 3
	while          reduce using rule 3
	%eof           reduce using rule 3


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 27
Number of terminals: 26
Number of non-terminals: 6
Number of states: 59
